{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TextInputAffix = exports.AffixAdornment = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../../core/theming\");\n\nvar _enums = require(\"./enums\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AFFIX_OFFSET = 12;\n\nvar AffixContext = _react.default.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: _enums.AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible,\n      paddingHorizontal = _ref.paddingHorizontal,\n      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return _react.default.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\n\nexports.AffixAdornment = AffixAdornment;\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n      labelStyle = _ref2.textStyle,\n      theme = _ref2.theme;\n\n  var _react$default$useCon = _react.default.useContext(AffixContext),\n      textStyle = _react$default$useCon.textStyle,\n      onLayout = _react$default$useCon.onLayout,\n      topPosition = _react$default$useCon.topPosition,\n      side = _react$default$useCon.side,\n      visible = _react$default$useCon.visible,\n      paddingHorizontal = _react$default$useCon.paddingHorizontal,\n      maxFontSizeMultiplier = _react$default$useCon.maxFontSizeMultiplier;\n\n  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, _react.default.createElement(_reactNative.Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nexports.TextInputAffix = TextInputAffix;\nTextInputAffix.displayName = 'TextInput.Affix';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(TextInputAffix);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["AFFIX_OFFSET","AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","_react","Provider","value","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","_reactNative","View","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"script"}