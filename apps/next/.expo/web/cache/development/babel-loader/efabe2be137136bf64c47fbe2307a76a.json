{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"mode\", \"dense\", \"disabled\", \"error\", \"multiline\", \"editable\", \"render\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _TextInputOutlined = _interopRequireDefault(require(\"./TextInputOutlined\"));\n\nvar _TextInputFlat = _interopRequireDefault(require(\"./TextInputFlat\"));\n\nvar _TextInputIcon = _interopRequireDefault(require(\"./Adornment/TextInputIcon\"));\n\nvar _TextInputAffix = _interopRequireDefault(require(\"./Adornment/TextInputAffix\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\nvar TextInput = React.forwardRef(function (_ref, ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n      _ref$dense = _ref.dense,\n      dense = _ref$dense === void 0 ? false : _ref$dense,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$error = _ref.error,\n      errorProp = _ref$error === void 0 ? false : _ref$error,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isControlled = rest.value !== undefined;\n  var validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(validInputValue ? 0 : 1)),\n      labeled = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(errorProp ? 1 : 0)),\n      error = _React$useRef2.current;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      placeholder = _React$useState4[0],\n      setPlaceholder = _React$useState4[1];\n\n  var _React$useState5 = React.useState(validInputValue),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      uncontrolledValue = _React$useState6[0],\n      setUncontrolledValue = _React$useState6[1];\n\n  var value = isControlled ? rest.value : uncontrolledValue;\n\n  var _React$useState7 = React.useState({\n    measured: false,\n    width: 0,\n    height: 0\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      labelLayout = _React$useState8[0],\n      setLabelLayout = _React$useState8[1];\n\n  var _React$useState9 = React.useState({\n    width: null,\n    height: null\n  }),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      leftLayout = _React$useState10[0],\n      setLeftLayout = _React$useState10[1];\n\n  var _React$useState11 = React.useState({\n    width: null,\n    height: null\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      rightLayout = _React$useState12[0],\n      setRightLayout = _React$useState12[1];\n\n  var timer = React.useRef();\n  var root = React.useRef();\n  var scale = rest.theme.animation.scale;\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _root$current;\n\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n      },\n      clear: function clear() {\n        var _root$current2;\n\n        return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n      },\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: function isFocused() {\n        var _root$current4;\n\n        return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n      },\n      blur: function blur() {\n        var _root$current5;\n\n        return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n      },\n      forceFocus: function forceFocus() {\n        var _root$current6;\n\n        return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n      }\n    };\n  });\n  React.useEffect(function () {\n    if (errorProp) {\n      _reactNative.Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        _reactNative.Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(function () {\n    if (focused || !rest.label) {\n      timer.current = setTimeout(function () {\n        return setPlaceholder(rest.placeholder);\n      }, 50);\n    } else {\n      setPlaceholder('');\n    }\n\n    return function () {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(function () {\n    if (value || focused) {\n      _reactNative.Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        _reactNative.Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [focused, value, labeled, scale]);\n\n  var onLeftAffixLayoutChange = function onLeftAffixLayoutChange(event) {\n    setLeftLayout({\n      height: event.nativeEvent.layout.height,\n      width: event.nativeEvent.layout.width\n    });\n  };\n\n  var onRightAffixLayoutChange = function onRightAffixLayoutChange(event) {\n    setRightLayout({\n      width: event.nativeEvent.layout.width,\n      height: event.nativeEvent.layout.height\n    });\n  };\n\n  var handleFocus = function handleFocus(args) {\n    var _rest$onFocus;\n\n    if (disabled || !editable) {\n      return;\n    }\n\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n\n  var handleBlur = function handleBlur(args) {\n    var _rest$onBlur;\n\n    if (!editable) {\n      return;\n    }\n\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n\n  var handleChangeText = function handleChangeText(value) {\n    var _rest$onChangeText;\n\n    if (!editable || disabled) {\n      return;\n    }\n\n    if (!isControlled) {\n      setUncontrolledValue(value);\n    }\n\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n\n  var handleLayoutAnimatedText = function handleLayoutAnimatedText(e) {\n    setLabelLayout({\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n      measured: true\n    });\n  };\n\n  var forceFocus = function forceFocus() {\n    var _root$current7;\n\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n      maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n\n  if (mode === 'outlined') {\n    return React.createElement(_TextInputOutlined.default, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      value: value,\n      parentState: {\n        labeled: labeled,\n        error: error,\n        focused: focused,\n        placeholder: placeholder,\n        value: value,\n        labelLayout: labelLayout,\n        leftLayout: leftLayout,\n        rightLayout: rightLayout\n      },\n      innerRef: function innerRef(ref) {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }));\n  }\n\n  return React.createElement(_TextInputFlat.default, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    value: value,\n    parentState: {\n      labeled: labeled,\n      error: error,\n      focused: focused,\n      placeholder: placeholder,\n      value: value,\n      labelLayout: labelLayout,\n      leftLayout: leftLayout,\n      rightLayout: rightLayout\n    },\n    innerRef: function innerRef(ref) {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }));\n});\nTextInput.Icon = _TextInputIcon.default;\nTextInput.Affix = _TextInputAffix.default;\n\nvar _default = (0, _theming.withTheme)(TextInput);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","forwardRef","ref","mode","dense","disabled","error","errorProp","multiline","editable","render","props","_reactNative","rest","isControlled","value","undefined","validInputValue","defaultValue","useRef","Animated","Value","labeled","current","useState","focused","setFocused","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","measured","width","height","labelLayout","setLabelLayout","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","theme","animation","useImperativeHandle","focus","_root$current","clear","_root$current2","setNativeProps","args","_root$current3","isFocused","blur","_root$current5","forceFocus","_root$current6","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","_root$current7","maxFontSizeMultiplier","_TextInputOutlined","parentState","innerRef","onLayoutAnimatedText","_TextInputFlat","Icon","TextInputIcon","Affix","TextInputAffix"],"sources":["TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    TextInputProps & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, TextInputProps>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: TextInputProps,\n    ref\n  ) => {\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ''\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(\n          () => setPlaceholder(rest.placeholder),\n          50\n        ) as unknown as NodeJS.Timeout;\n      } else {\n        // hidePlaceholder\n        setPlaceholder('');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"script"}