{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createNativeWrapper;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NativeViewGestureHandler = require(\"./NativeViewGestureHandler\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar NATIVE_WRAPPER_PROPS_FILTER = [].concat(_toConsumableArray(_NativeViewGestureHandler.nativeViewProps), ['onGestureHandlerEvent', 'onGestureHandlerStateChange']);\n\nfunction createNativeWrapper(Component) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ComponentWrapper = React.forwardRef(function (props, ref) {\n    var gestureHandlerProps = Object.keys(props).reduce(function (res, key) {\n      var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n\n      if (allowedKeys.includes(key)) {\n        res[key] = props[key];\n      }\n\n      return res;\n    }, _objectSpread({}, config));\n\n    var _ref = (0, React.useRef)();\n\n    var _gestureHandlerRef = (0, React.useRef)();\n\n    (0, React.useImperativeHandle)(ref, function () {\n      var node = _gestureHandlerRef.current;\n\n      if (_ref.current && node) {\n        _ref.current.handlerTag = node.handlerTag;\n        return _ref.current;\n      }\n\n      return null;\n    }, [_ref, _gestureHandlerRef]);\n    return React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n      ref: _gestureHandlerRef\n    }), React.createElement(Component, _extends({}, props, {\n      ref: _ref\n    })));\n  });\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,2BAA2B,gCAC5BC,yCAD4B,IAE/B,uBAF+B,EAG/B,6BAH+B,EAAjC;;AAMe,SAASC,mBAAT,CACbC,SADa,EAGb;AAAA,MADAC,MACA,uEADkD,EAClD;AACA,MAAMC,gBAAgB,GAAGC,KAAK,CAACC,UAAND,CAGvB,UAACE,KAAD,EAAQC,GAAR,EAAgB;AAEhB,QAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAPD,CAAYH,KAAZG,EAAmBE,MAAnBF,CAC1B,UAACG,GAAD,EAAMC,GAAN,EAAc;AAEZ,UAAMC,WAA8B,GAAGhB,2BAAvC;;AACA,UAAIgB,WAAW,CAACC,QAAZD,CAAqBD,GAArBC,CAAJ,EAA+B;AAE7BF,WAAG,CAACC,GAAD,CAAHD,GAAWN,KAAK,CAACO,GAAD,CAAhBD;AACD;;AACD,aAAOA,GAAP;AARwB,yBAUrBV,MAVqBO,EAA5B;;AAYA,QAAMO,IAAI,GAAG,mBAAb;;AACA,QAAMC,kBAAkB,GAAG,mBAA3B;;AACA,mCACEV,GADF,EAGE,YAAM;AACJ,UAAMW,IAAI,GAAGD,kBAAkB,CAACE,OAAhC;;AAEA,UAAIH,IAAI,CAACG,OAALH,IAAgBE,IAApB,EAA0B;AAExBF,YAAI,CAACG,OAALH,CAAaI,UAAbJ,GAA0BE,IAAI,CAACE,UAA/BJ;AACA,eAAOA,IAAI,CAACG,OAAZ;AACD;;AACD,aAAO,IAAP;AAXJ,OAaE,CAACH,IAAD,EAAOC,kBAAP,CAbF;AAeA,WACEb,oBAACiB,kDAAD,eACMb,mBADN;AAGED,SAAG,EAAEU;AAHP,QAIEb,oBAACH,SAAD,eAAeK,KAAf;AAAsBC,SAAG,EAAES;AAA3B,OAJF,CADF;AAlCuB,IAAzB;AA4CAb,kBAAgB,CAACmB,WAAjBnB,GAA+BF,SAAS,CAACqB,WAAVrB,IAAyB,kBAAxDE;AAEA,SAAOA,gBAAP;AACD","names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","createNativeWrapper","Component","config","ComponentWrapper","React","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","allowedKeys","includes","_ref","_gestureHandlerRef","node","current","handlerTag","_NativeViewGestureHandler","displayName"],"sources":["createNativeWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"script"}