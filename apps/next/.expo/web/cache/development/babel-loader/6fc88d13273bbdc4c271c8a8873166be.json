{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _GestureHandler = _interopRequireDefault(require(\"./GestureHandler\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DraggingGestureHandler = function (_GestureHandler$defau) {\n  _inherits(DraggingGestureHandler, _GestureHandler$defau);\n\n  var _super = _createSuper(DraggingGestureHandler);\n\n  function DraggingGestureHandler() {\n    _classCallCheck(this, DraggingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DraggingGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          velocityX = _ref.velocityX,\n          velocityY = _ref.velocityY,\n          _ref$center = _ref.center,\n          x = _ref$center.x,\n          y = _ref$center.y;\n      var rect = this.view.getBoundingClientRect();\n\n      var ratio = _reactNative.PixelRatio.get();\n\n      return {\n        translationX: deltaX - (this.__initialX || 0),\n        translationY: deltaY - (this.__initialY || 0),\n        absoluteX: x,\n        absoluteY: y,\n        velocityX: velocityX * ratio,\n        velocityY: velocityY * ratio,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }]);\n\n  return DraggingGestureHandler;\n}(_GestureHandler.default);\n\nvar _default = DraggingGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;IAGeA,sB;;;;;;;;;;;;;SACiB,eAAG;AAC/B,aAAO,IAAP;AACD;;;WAEDC,oCAMmB;AAAA,UALjBC,MAKiB,QALjBA,MAKiB;AAAA,UAJjBC,MAIiB,QAJjBA,MAIiB;AAAA,UAHjBC,SAGiB,QAHjBA,SAGiB;AAAA,UAFjBC,SAEiB,QAFjBA,SAEiB;AAAA,6BADjBC,MACiB;AAAA,UADPC,CACO,eADPA,CACO;AAAA,UADJC,CACI,eADJA,CACI;AAEjB,UAAMC,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;;AACA,UAAMC,KAAK,GAAGC,wBAAWC,GAAXD,EAAd;;AACA,aAAO;AACLE,oBAAY,EAAEb,MAAM,IAAI,KAAKc,UAAL,IAAmB,CAAvB,CADf;AAELC,oBAAY,EAAEd,MAAM,IAAI,KAAKe,UAAL,IAAmB,CAAvB,CAFf;AAGLC,iBAAS,EAAEZ,CAHN;AAILa,iBAAS,EAAEZ,CAJN;AAKLJ,iBAAS,EAAEA,SAAS,GAAGQ,KALlB;AAMLP,iBAAS,EAAEA,SAAS,GAAGO,KANlB;AAOLL,SAAC,EAAEA,CAAC,GAAGE,IAAI,CAACY,IAPP;AAQLb,SAAC,EAAEA,CAAC,GAAGC,IAAI,CAACa;AARP,OAAP;AAUD;;;;EAzB2CC,uB;;eA4B/BvB","names":["DraggingGestureHandler","transformNativeEvent","deltaX","deltaY","velocityX","velocityY","center","x","y","rect","view","getBoundingClientRect","ratio","PixelRatio","get","translationX","__initialX","translationY","__initialY","absoluteX","absoluteY","left","top","GestureHandler"],"sources":["DraggingGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler, { HammerInputExt } from './GestureHandler';\nimport { PixelRatio } from 'react-native';\n\nabstract class DraggingGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  transformNativeEvent({\n    deltaX,\n    deltaY,\n    velocityX,\n    velocityY,\n    center: { x, y },\n  }: HammerInputExt) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const ratio = PixelRatio.get();\n    return {\n      translationX: deltaX - (this.__initialX || 0),\n      translationY: deltaY - (this.__initialY || 0),\n      absoluteX: x,\n      absoluteY: y,\n      velocityX: velocityX * ratio,\n      velocityY: velocityY * ratio,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n}\n\nexport default DraggingGestureHandler;\n"]},"metadata":{},"sourceType":"script"}