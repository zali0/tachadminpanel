{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nvar AFFIX_OFFSET = 12;\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible,\n      paddingHorizontal = _ref.paddingHorizontal,\n      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n      labelStyle = _ref2.textStyle,\n      theme = _ref2.theme;\n\n  var _React$useContext = React.useContext(AffixContext),\n      textStyle = _React$useContext.textStyle,\n      onLayout = _React$useContext.onLayout,\n      topPosition = _React$useContext.topPosition,\n      side = _React$useContext.side,\n      visible = _React$useContext.visible,\n      paddingHorizontal = _React$useContext.paddingHorizontal,\n      maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier;\n\n  var textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":"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","names":["React","color","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","Provider","value","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}