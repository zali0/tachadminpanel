{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar _State = require(\"../State\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(PanGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(PanGestureHandler);\n\n  function PanGestureHandler() {\n    _classCallCheck(this, PanGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PanGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Pan;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = _get(_getPrototypeOf(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n\n      if (this.previousState === _State.State.UNDETERMINED && nextState === _State.State.ACTIVE) {\n        return _State.State.BEGAN;\n      }\n\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n          activeOffsetXEnd = config.activeOffsetXEnd,\n          activeOffsetYStart = config.activeOffsetYStart,\n          activeOffsetYEnd = config.activeOffsetYEnd,\n          minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n\n      if (!(0, _utils.isnan)(minDist)) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      if (!(0, _utils.isnan)(activeOffsetXStart)) horizontalDirections.push(_hammerjs.default.DIRECTION_LEFT);\n      if (!(0, _utils.isnan)(activeOffsetXEnd)) horizontalDirections.push(_hammerjs.default.DIRECTION_RIGHT);\n      if (horizontalDirections.length === 2) horizontalDirections = [_hammerjs.default.DIRECTION_HORIZONTAL];\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!(0, _utils.isnan)(activeOffsetYStart)) verticalDirections.push(_hammerjs.default.DIRECTION_UP);\n      if (!(0, _utils.isnan)(activeOffsetYEnd)) verticalDirections.push(_hammerjs.default.DIRECTION_DOWN);\n      if (verticalDirections.length === 2) verticalDirections = [_hammerjs.default.DIRECTION_VERTICAL];\n      directions = directions.concat(verticalDirections);\n\n      if (!directions.length) {\n        return _hammerjs.default.DIRECTION_NONE;\n      }\n\n      if (directions[0] === _hammerjs.default.DIRECTION_HORIZONTAL && directions[1] === _hammerjs.default.DIRECTION_VERTICAL) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      if (horizontalDirections.length && verticalDirections.length) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      return !(0, _utils.isnan)(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !(0, _utils.isnan)(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !(0, _utils.isnan)(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !(0, _utils.isnan)(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY,\n          velocity = _ref2.velocity;\n      return !(0, _utils.isnan)(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !(0, _utils.isnan)(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !(0, _utils.isnan)(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !(0, _utils.isnan)(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.x, criteria.minVelocityX) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.y, criteria.minVelocityY) || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n          scale = _ref3.scale,\n          deltaRotation = _ref3.deltaRotation;\n\n      if (pointerLength <= 1) {\n        return false;\n      }\n\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n\n      if (deltaScale > _constants.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n\n      if (absDeltaRotation > _constants.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return (0, _utils.isValidNumber)(criteria.minDistSq) || (0, _utils.isValidNumber)(criteria.minVelocityX) || (0, _utils.isValidNumber)(criteria.minVelocityY) || (0, _utils.isValidNumber)(criteria.minVelocitySq) || (0, _utils.isValidNumber)(criteria.activeOffsetXStart) || (0, _utils.isValidNumber)(criteria.activeOffsetXEnd) || (0, _utils.isValidNumber)(criteria.activeOffsetYStart) || (0, _utils.isValidNumber)(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n\n        return {\n          success: true\n        };\n      }\n\n      return {\n        success: false\n      };\n    }\n  }]);\n\n  return PanGestureHandler;\n}(_DraggingGestureHandler.default);\n\nvar _default = PanGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["PanGestureHandler","Hammer","Pan","getHammerConfig","direction","getDirection","getState","type","nextState","previousState","State","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","updateHasCustomActivationCriteria","isGestureEnabledForEvent","props","_recognizer","inputData","failed","velocityX","velocityY","maxPointers","success","DraggingGestureHandler"],"sources":["PanGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart))\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd))\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2)\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart))\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd))\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2)\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"script"}