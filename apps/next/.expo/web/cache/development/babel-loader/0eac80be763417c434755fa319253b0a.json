{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adjustPaddingOut = exports.adjustPaddingFlat = void 0;\nexports.calculateFlatAffixTopPosition = calculateFlatAffixTopPosition;\nexports.calculateLabelTopPosition = exports.calculateInputHeight = exports.calculateFlatInputHorizontalPadding = void 0;\nexports.calculateOutlinedIconAndAffixTopPosition = calculateOutlinedIconAndAffixTopPosition;\nexports.interpolatePlaceholder = exports.calculatePadding = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexports.calculateLabelTopPosition = calculateLabelTopPosition;\n\nvar calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexports.calculateInputHeight = calculateInputHeight;\n\nvar calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nexports.calculatePadding = calculatePadding;\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nvar adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      lineHeight = _ref2.lineHeight,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;\n  var refFontHeight = scale * fontSize;\n  var result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\n\nexports.adjustPaddingOut = adjustPaddingOut;\n\nvar adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\n\nexports.adjustPaddingFlat = adjustPaddingFlat;\n\nvar interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};\n\nexports.interpolatePlaceholder = interpolatePlaceholder;\n\nfunction calculateFlatAffixTopPosition(_ref4) {\n  var height = _ref4.height,\n      paddingTop = _ref4.paddingTop,\n      paddingBottom = _ref4.paddingBottom,\n      affixHeight = _ref4.affixHeight;\n  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nfunction calculateOutlinedIconAndAffixTopPosition(_ref5) {\n  var height = _ref5.height,\n      affixHeight = _ref5.affixHeight,\n      labelYOffset = _ref5.labelYOffset;\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nvar calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig;\n  var paddingLeft = _constants.LABEL_PADDING_HORIZONTAL;\n  var paddingRight = _constants.LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(function (_ref7) {\n    var type = _ref7.type,\n        side = _ref7.side;\n\n    if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {\n      paddingLeft = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;\n    } else if (side === _enums.AdornmentSide.Right) {\n      if (type === _enums.AdornmentType.Affix) {\n        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;\n      } else if (type === _enums.AdornmentType.Icon) {\n        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft: paddingLeft,\n    paddingRight: paddingRight\n  };\n};\n\nexports.calculateFlatInputHorizontalPadding = calculateFlatInputHorizontalPadding;","map":{"version":3,"mappings":"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","names":["calculateLabelTopPosition","labelHeight","height","optionalPadding","customHeight","Math","floor","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","max","dense","topPosition","fontSize","scale","offset","isAndroid","refFontSize","min","adjustPaddingOut","pad","label","lineHeight","fontHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","interpolatePlaceholder","labeled","hasActiveOutline","interpolate","inputRange","outputRange","calculateFlatAffixTopPosition","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","calculateOutlinedIconAndAffixTopPosition","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","LABEL_PADDING_HORIZONTAL","paddingRight","forEach","type","side","AdornmentType","Icon","AdornmentSide","Left","ADORNMENT_SIZE","ADORNMENT_OFFSET","FLAT_INPUT_OFFSET","Right","Affix"],"sources":["helpers.tsx"],"sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport type { TextInputLabelProp } from './types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n"]},"metadata":{},"sourceType":"script"}