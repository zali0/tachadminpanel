{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"loading\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.FAB = void 0;\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"../ActivityIndicator\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"../CrossFadeIcon\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../../utils/getContrastingColor\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n_getContrastingColor.default;\n\nvar FAB = function FAB(_ref) {\n  var small = _ref.small,\n      icon = _ref.icon,\n      label = _ref.label,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      accessibilityState = _ref.accessibilityState,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? true : _ref$animated,\n      customColor = _ref.color,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      loading = _ref.loading,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      visibility = _React$useRef.current;\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n  var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref2$backgroundColor;\n\n  var foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');\n  }\n\n  var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [{\n      backgroundColor: backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n      disabled: disabled\n    }),\n    style: styles.touchable,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? React.createElement(IconComponent, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  }) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: 18,\n    color: foregroundColor\n  }) : null, label ? React.createElement(_Text.default, {\n    selectable: false,\n    style: [styles.label, uppercase && styles.uppercaseLabel, _objectSpread({\n      color: foregroundColor\n    }, theme.fonts.medium)]\n  }, label) : null)));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(FAB);\n\nexports.default = _default;\nvar FABWithTheme = (0, _theming.withTheme)(FAB);\nexports.FAB = FABWithTheme;","map":{"version":3,"mappings":"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","names":["getContrastingColor","FAB","small","icon","label","accessibilityLabel","accessibilityState","animated","customColor","color","disabled","onPress","onLongPress","theme","style","visible","uppercase","loading","testID","rest","React","useRef","Animated","Value","visibility","current","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","CrossFadeIcon","Icon","disabledColor","dark","white","black","alpha","rgb","string","StyleSheet","flatten","backgroundColor","colors","accent","foregroundColor","rippleColor","_Surface","opacity","transform","styles","container","pointerEvents","_TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","_reactNative","content","extended","standard","source","size","_ActivityIndicator","_Text","selectable","uppercaseLabel","fonts","medium","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform","FABWithTheme"],"sources":["FAB.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]},"metadata":{},"sourceType":"script"}