{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _CardContent = _interopRequireDefault(require(\"./CardContent\"));\n\nvar _CardActions = _interopRequireDefault(require(\"./CardActions\"));\n\nvar _CardCover2 = _interopRequireDefault(require(\"./CardCover\"));\n\nvar _CardTitle2 = _interopRequireDefault(require(\"./CardTitle\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(cardElevation)),\n      elevationDarkAdaptive = _React$useRef2.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n\n    if (dark && isAdaptiveMode) {\n      _reactNative.Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      _reactNative.Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = (0, _color.default)(dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(_reactNative.View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = _CardContent.default;\nCard.Actions = _CardActions.default;\nCard.Cover = _CardCover2.default;\nCard.Title = _CardTitle2.default;\n\nvar styles = _reactNative.StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Card);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","React","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","white","black","alpha","rgb","string","computedElevation","_Surface","borderRadius","styles","outlined","_reactNative","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"script"}