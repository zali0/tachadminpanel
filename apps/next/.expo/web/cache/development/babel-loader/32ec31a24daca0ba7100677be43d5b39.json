{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"source\", \"style\", \"onError\", \"onLayout\", \"onLoad\", \"onLoadEnd\", \"onLoadStart\", \"onProgress\", \"theme\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../../core/theming\";\nvar defaultSize = 64;\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      source = _ref.source,\n      style = _ref.style,\n      onError = _ref.onError,\n      onLayout = _ref.onLayout,\n      onLoad = _ref.onLoad,\n      onLoadEnd = _ref.onLoadEnd,\n      onLoadStart = _ref.onLoadStart,\n      onProgress = _ref.onProgress,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var colors = theme.colors;\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? colors.primary : _ref2$backgroundColor;\n\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, style]\n  }, rest), typeof source === 'function' && source({\n    size: size\n  }), typeof source !== 'function' && React.createElement(Image, {\n    source: source,\n    style: {\n      width: size,\n      height: size,\n      borderRadius: size / 2\n    },\n    onError: onError,\n    onLayout: onLayout,\n    onLoad: onLoad,\n    onLoadEnd: onLoadEnd,\n    onLoadStart: onLoadStart,\n    onProgress: onProgress\n  }));\n};\n\nAvatarImage.displayName = 'Avatar.Image';\nexport default withTheme(AvatarImage);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAUA,SAASC,SAAT;AAEA,IAAMC,WAAW,GAAG,EAApB;;AAoEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAYP;AAAA,uBAXXC,IAWW;AAAA,MAXXA,IAWW,0BAXJF,WAWI;AAAA,MAVXG,MAUW,QAVXA,MAUW;AAAA,MATXC,KASW,QATXA,KASW;AAAA,MARXC,OAQW,QARXA,OAQW;AAAA,MAPXC,QAOW,QAPXA,QAOW;AAAA,MANXC,MAMW,QANXA,MAMW;AAAA,MALXC,SAKW,QALXA,SAKW;AAAA,MAJXC,WAIW,QAJXA,WAIW;AAAA,MAHXC,UAGW,QAHXA,UAGW;AAAA,MAFXC,KAEW,QAFXA,KAEW;AAAA,MADRC,IACQ;;AACX,MAAQC,MAAR,GAAmBF,KAAnB,CAAQE,MAAR;;AAEA,cAA6CC,UAAU,CAACC,OAAXD,CAAmBV,KAAnBU,KAA6B,EAA1E;AAAA,oCAAQE,eAAR;AAAA,MAAQA,eAAR,sCAA0BH,MAAM,CAACI,OAAjC;;AAEA,SACEnB,oBAACoB,IAAD;AACEd,SAAK,EAAE,CACL;AACEe,WAAK,EAAEjB,IADT;AAEEkB,YAAM,EAAElB,IAFV;AAGEmB,kBAAY,EAAEnB,IAAI,GAAG,CAHvB;AAIEc;AAJF,KADK,EAOLZ,KAPK;AADT,KAUMQ,IAVN,GAYG,OAAOT,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC;AAAED;AAAF,GAAD,CAZzC,EAaG,OAAOC,MAAP,KAAkB,UAAlB,IACCL,oBAACwB,KAAD;AACEnB,UAAM,EAAEA,MADV;AAEEC,SAAK,EAAE;AAAEe,WAAK,EAAEjB,IAAT;AAAekB,YAAM,EAAElB,IAAvB;AAA6BmB,kBAAY,EAAEnB,IAAI,GAAG;AAAlD,KAFT;AAGEG,WAAO,EAAEA,OAHX;AAIEC,YAAQ,EAAEA,QAJZ;AAKEC,UAAM,EAAEA,MALV;AAMEC,aAAS,EAAEA,SANb;AAOEC,eAAW,EAAEA,WAPf;AAQEC,cAAU,EAAEA;AARd,IAdJ,CADF;AAjBF;;AA+CAT,WAAW,CAACsB,WAAZtB,GAA0B,cAA1BA;AAEA,eAAeF,SAAS,CAACE,WAAD,CAAxB","names":["React","withTheme","defaultSize","AvatarImage","size","source","style","onError","onLayout","onLoad","onLoadEnd","onLoadStart","onProgress","theme","rest","colors","StyleSheet","flatten","backgroundColor","primary","View","width","height","borderRadius","Image","displayName"],"sources":["AvatarImage.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  ImageProps,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Invoked on load error.\n   */\n  onError?: ImageProps['onError'];\n  /**\n   * Invoked on mount and on layout changes.\n   */\n  onLayout?: ImageProps['onLayout'];\n  /**\n   * Invoked when load completes successfully.\n   */\n  onLoad?: ImageProps['onLoad'];\n  /**\n   * Invoked when load either succeeds or fails.\n   */\n  onLoadEnd?: ImageProps['onLoadEnd'];\n  /**\n   * Invoked on load start.\n   */\n  onLoadStart?: ImageProps['onLoadStart'];\n  /**\n   * Invoked on download progress.\n   */\n  onProgress?: ImageProps['onProgress'];\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n  size = defaultSize,\n  source,\n  style,\n  onError,\n  onLayout,\n  onLoad,\n  onLoadEnd,\n  onLoadStart,\n  onProgress,\n  theme,\n  ...rest\n}: Props) => {\n  const { colors } = theme;\n\n  const { backgroundColor = colors.primary } = StyleSheet.flatten(style) || {};\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {typeof source === 'function' && source({ size })}\n      {typeof source !== 'function' && (\n        <Image\n          source={source}\n          style={{ width: size, height: size, borderRadius: size / 2 }}\n          onError={onError}\n          onLayout={onLayout}\n          onLoad={onLoad}\n          onLoadEnd={onLoadEnd}\n          onLoadStart={onLoadStart}\n          onProgress={onProgress}\n        />\n      )}\n    </View>\n  );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default withTheme(AvatarImage);\n"]},"metadata":{},"sourceType":"module"}