{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reanimated = void 0;\nvar Reanimated;\nexports.Reanimated = Reanimated;\n\ntry {\n  exports.Reanimated = Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = function () {\n      'worklet';\n\n      console.warn('Please use newer version of react-native-reanimated in order to control state of the gestures.');\n    };\n  }\n} catch (e) {}","map":{"version":3,"mappings":";;;;;;AAUA,IAAIA,UAAJ;;;AAkBA,IAAI;AACFC,iCAAU,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AAEA,MAAI,CAACF,UAAU,CAACG,eAAhB,EAAiC;AAC/BH,cAAU,CAACG,eAAXH,GAA6B,YAAM;AACjC;;AACAI,aAAO,CAACC,IAARD,CACE,gGADFA;AAFF;AAJA;AAAJ,EAcE,OAAOE,CAAP,EAAU,CAAE","names":["Reanimated","exports","require","setGestureState","console","warn","e"],"sources":["reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"]},"metadata":{},"sourceType":"script"}