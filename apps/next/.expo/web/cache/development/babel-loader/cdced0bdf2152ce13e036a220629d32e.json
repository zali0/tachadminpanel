{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT;AACA,SAASC,KAAT;AASA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,QADiC,kBAC1BC,UAD0B,EACmB;AAClD;;AACA,WAAO;AACLC,WAAK,EAAE,iBAAM;AACX;;AACA,YAAIL,UAAJ,EAAgB;AACdA,oBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACM,KAA7CP;AADF,eAEO;AACLQ,iBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AATE;AAYLE,cAAQ,EAAE,oBAAM;AACd;;AACA,YAAIV,UAAJ,EAAgB;AACdA,oBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACU,MAA7CX;AADF,eAEO;AACLQ,iBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AApBE;AAuBLI,UAAI,EAAE,gBAAM;AACV;;AACA,YAAIZ,UAAJ,EAAgB;AACdA,oBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACY,MAA7Cb;AADF,eAEO;AACLQ,iBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AA/BE;AAkCLM,SAAG,EAAE,eAAM;AACT;;AACA,YAAId,UAAJ,EAAgB;AACdA,oBAAU,CAACM,eAAXN,CAA2BI,UAA3BJ,EAAuCC,KAAK,CAACc,GAA7Cf;AADF,eAEO;AACLQ,iBAAO,CAACC,IAARD,CACE,kFADFA;AAGD;AACF;AA3CI,KAAP;AA6CD;AAhDgC,CAA5B","names":["Reanimated","State","GestureStateManager","create","handlerTag","begin","setGestureState","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}