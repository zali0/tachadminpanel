{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"right\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      right = _ref.right,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n  var font = theme.fonts.medium;\n  var labelMargin = icon ? 32 : 0;\n  return React.createElement(View, rest, React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness\n    }, style],\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(View, {\n    style: styles.content\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, _objectSpread(_objectSpread({\n      color: contentColor\n    }, font), {}, {\n      marginLeft: labelMargin\n    })]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"mappings":"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","names":["color","React","Text","Icon","TouchableRipple","withTheme","DrawerItem","icon","label","active","theme","style","onPress","accessibilityLabel","right","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","View","borderless","delayPressIn","styles","container","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","content","source","size","selectable","numberOfLines","marginLeft","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","marginRight"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}