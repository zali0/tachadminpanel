{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ManualGesture = void 0;\n\nvar _gesture = require(\"./gesture\");\n\nfunction changeEventCalculator(current, _previous) {\n  'worklet';\n\n  return current;\n}\n\nvar ManualGesture = function (_gesture$ContinousBas) {\n  _inherits(ManualGesture, _gesture$ContinousBas);\n\n  var _super = _createSuper(ManualGesture);\n\n  function ManualGesture() {\n    var _this;\n\n    _classCallCheck(this, ManualGesture);\n\n    _this = _super.call(this);\n    _this.handlerName = 'ManualGestureHandler';\n    return _this;\n  }\n\n  _createClass(ManualGesture, [{\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return _get(_getPrototypeOf(ManualGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n\n  return ManualGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.ManualGesture = ManualGesture;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA,SAASA,qBAAT,CACEC,OADF,EAEEC,SAFF,EAGE;AACA;;AACA,SAAOD,OAAP;AACD;;IAEYE,a;;;;;AAIXC,2BAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,WAAL,GAAmB,sBAAnB;AAHY;AAIb;;;;WAEDC,kBACEC,QADFD,EAEE;AAEA,WAAKE,QAAL,CAAcR,qBAAd,GAAsCA,qBAAtC;AACA,yFAAsBO,QAAtB;AACD;;;;EAhBgCE,6B","names":["changeEventCalculator","current","_previous","ManualGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["manualGesture.ts"],"sourcesContent":["import { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport { ContinousBaseGesture } from './gesture';\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<Record<string, never>>,\n  _previous?: GestureUpdateEvent<Record<string, never>>\n) {\n  'worklet';\n  return current;\n}\n\nexport class ManualGesture extends ContinousBaseGesture<\n  Record<string, never>,\n  Record<string, never>\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'ManualGestureHandler';\n  }\n\n  onChange(\n    callback: (event: GestureUpdateEvent<Record<string, never>>) => void\n  ) {\n    // @ts-ignore TS being overprotective, Record<string, never> is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ManualGestureType = InstanceType<typeof ManualGesture>;\n"]},"metadata":{},"sourceType":"script"}