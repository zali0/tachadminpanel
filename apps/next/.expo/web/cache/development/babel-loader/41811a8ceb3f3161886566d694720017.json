{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _GestureHandler = _interopRequireDefault(require(\"./GestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DiscreteGestureHandler = function (_GestureHandler$defau) {\n  _inherits(DiscreteGestureHandler, _GestureHandler$defau);\n\n  var _super = _createSuper(DiscreteGestureHandler);\n\n  function DiscreteGestureHandler() {\n    _classCallCheck(this, DiscreteGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiscreteGestureHandler, [{\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n          y = _ref.y,\n          deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n          maxDeltaY = _ref2.maxDeltaY,\n          maxDistSq = _ref2.maxDistSq,\n          shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n\n      return (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaX), maxDeltaX) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY), maxDeltaY) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var _ref3$center = _ref3.center,\n          x = _ref3$center.x,\n          y = _ref3$center.y;\n      var rect = this.view.getBoundingClientRect();\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, _recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n          maxPointers = _ref4.maxPointers,\n          maxDeltaX = _ref4.maxDeltaX,\n          maxDeltaY = _ref4.maxDeltaY,\n          maxDistSq = _ref4.maxDistSq,\n          shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n      var pointerLength = _ref5.maxPointers,\n          center = _ref5.center,\n          deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY;\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n      if (this.shouldFailUnderCustomCriteria(_objectSpread(_objectSpread({}, center), {}, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n\n  return DiscreteGestureHandler;\n}(_GestureHandler.default);\n\nvar _default = DiscreteGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;;;IAEeA,sB;;;;;;;;;;;;;SACC,eAAG;AACf,aAAO,IAAP;AACD;;;SAE6B,eAAG;AAC/B,aAAO,IAAP;AACD;;;WAEDC,oDAGE;AAAA,UAFEC,CAEF,QAFEA,CAEF;AAAA,UAFKC,CAEL,QAFKA,CAEL;AAAA,UAFQC,MAER,QAFQA,MAER;AAAA,UAFgBC,MAEhB,QAFgBA,MAEhB;AAAA,UADEC,SACF,SADEA,SACF;AAAA,UADaC,SACb,SADaA,SACb;AAAA,UADwBC,SACxB,SADwBA,SACxB;AAAA,UADmCC,uBACnC,SADmCA,uBACnC;;AACA,UAAIA,uBAAJ,EAA6B;AAC3B,YAAI,CAAC,KAAKC,aAAL,CAAmB;AAAER,WAAF,EAAEA,CAAF;AAAKC;AAAL,SAAnB,CAAL,EAAmC;AACjC,iBAAO,IAAP;AACD;AACF;;AACD,aACE,gCAAoBQ,IAAI,CAACC,GAALD,CAASP,MAATO,CAApB,EAAsCL,SAAtC,KACA,gCAAoBK,IAAI,CAACC,GAALD,CAASN,MAATM,CAApB,EAAsCJ,SAAtC,CADA,IAEA,gCACEI,IAAI,CAACC,GAALD,CAASN,MAAM,GAAGA,MAATA,GAAkBD,MAAM,GAAGA,MAApCO,CADF,EAEEH,SAFF,CAHF;AAQD;;;WAEDK,qCAAgD;AAAA,+BAAzBC,MAAyB;AAAA,UAAfZ,CAAe,gBAAfA,CAAe;AAAA,UAAZC,CAAY,gBAAZA,CAAY;AAE9C,UAAMY,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;AAEA,aAAO;AACLC,iBAAS,EAAEhB,CADN;AAELiB,iBAAS,EAAEhB,CAFN;AAGLD,SAAC,EAAEA,CAAC,GAAGa,IAAI,CAACK,IAHP;AAILjB,SAAC,EAAEA,CAAC,GAAGY,IAAI,CAACM;AAJP,OAAP;AAMD;;;WAEDC,yCASEC,WATFD,SAWE;AAAA,UATEE,WASF,SATEA,WASF;AAAA,UAREC,WAQF,SAREA,WAQF;AAAA,UAPEnB,SAOF,SAPEA,SAOF;AAAA,UANEC,SAMF,SANEA,SAMF;AAAA,UALEC,SAKF,SALEA,SAKF;AAAA,UAJEC,uBAIF,SAJEA,uBAIF;AAAA,UADeiB,aACf,SADED,WACF;AAAA,UAD8BX,MAC9B,SAD8BA,MAC9B;AAAA,UADsCV,MACtC,SADsCA,MACtC;AAAA,UAD8CC,MAC9C,SAD8CA,MAC9C;AACA,UAAMsB,iBAAiB,GACrBD,aAAa,IAAIF,WAAjBE,IAAgCA,aAAa,IAAID,WADnD;;AAGA,UACE,KAAKxB,6BAAL,iCACOa,MADP;AACeV,cAAb,EAAaA,MADf;AACuBC;AADvB,UAEE;AACEC,iBADF,EACEA,SADF;AAEEC,iBAFF,EAEEA,SAFF;AAGEC,iBAHF,EAGEA,SAHF;AAIEC;AAJF,OAFF,KAWC,CAACkB,iBAAD,IAAsB,KAAKC,gBAZ9B,EAaE;AACA,eAAO;AAAEC,gBAAM,EAAE;AAAV,SAAP;AACD;;AAED,aAAO;AAAEC,eAAO,EAAEH;AAAX,OAAP;AACD;;;;EAzE2CI,uB;;eA4E/B/B","names":["DiscreteGestureHandler","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","Math","abs","transformNativeEvent","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","isGestureEnabledForEvent","_recognizer","minPointers","maxPointers","pointerLength","validPointerCount","isGestureRunning","failed","success","GestureHandler"],"sources":["DiscreteGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"script"}