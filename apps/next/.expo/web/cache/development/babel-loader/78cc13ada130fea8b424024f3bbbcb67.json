{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\n\nvar _State = require(\"../State\");\n\nvar _handlersRegistry = require(\"./handlersRegistry\");\n\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\n\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar UIManagerAny = _reactNative.UIManager;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n    oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n    _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n    oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\n\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManagerAny.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n\n  oldClearJSResponder();\n};\n\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && _reactNative.Platform.OS === 'android';\n\nif (DEV_ON_ANDROID) {\n  _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, _State.State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, _State.State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);\n\nfunction createHandler(_ref) {\n  var name = _ref.name,\n      _ref$allowedProps = _ref.allowedProps,\n      allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {} : _ref$config,\n      transformProps = _ref.transformProps,\n      _ref$customNativeProp = _ref.customNativeProps,\n      customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"inspectorToggleListener\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (_reactNative.Platform.OS === 'web') {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, false, _this.propsRef);\n        } else {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, false);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n\n      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n\n      if (props.id) {\n        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n\n            _this2.update();\n          });\n        }\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n\n        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete _handlersRegistry.handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n\n        if (!(0, _isEqual.default)(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n            onGestureEvent = _this$props5.onGestureEvent,\n            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n            onHandlerStateChange = _this$props6.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(_reactNative.Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"mappings":"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","names":["UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","React","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}