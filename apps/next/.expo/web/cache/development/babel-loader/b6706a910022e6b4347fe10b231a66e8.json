{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref4 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    var isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-outlined'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}