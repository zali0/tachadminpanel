{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\n\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      underlineColor = _ref.underlineColor,\n      activeUnderlineColor = _ref.activeUnderlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isAndroid = Platform.OS === 'android';\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref3.fontSize,\n      fontWeight = _ref3.fontWeight,\n      height = _ref3.height,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      textAlign = _ref3.textAlign,\n      viewStyle = _objectWithoutProperties(_ref3, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n\n  var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n    adornmentConfig: adornmentConfig\n  }),\n      paddingLeft = _calculateFlatInputHo.paddingLeft,\n      paddingRight = _calculateFlatInputHo.paddingRight;\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat\n  });\n  var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  var containerStyle = {\n    backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && label && React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-flat'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps));\n};\n\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","InputMode","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","isAndroid","Platform","OS","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","height","paddingHorizontal","textAlign","viewStyle","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","labelContainer","testID","pointerEvents","absoluteFill","densePatchContainer","patchContainer","ref","underlineColorAndroid","input","textAlignVertical","outline","Animated","underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}