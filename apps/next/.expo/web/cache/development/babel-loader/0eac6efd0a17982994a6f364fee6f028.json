{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Button = function Button(_ref) {\n  var _StyleSheet$flatten;\n\n  var disabled = _ref.disabled,\n      compact = _ref.compact,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n      dark = _ref.dark,\n      loading = _ref.loading,\n      icon = _ref.icon,\n      buttonColor = _ref.color,\n      children = _ref.children,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      accessibilityLabel = _ref.accessibilityLabel,\n      accessibilityHint = _ref.accessibilityHint,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      style = _ref.style,\n      theme = _ref.theme,\n      contentStyle = _ref.contentStyle,\n      labelStyle = _ref.labelStyle,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),\n      elevation = _React$useRef.current;\n\n  React.useEffect(function () {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n\n      _reactNative.Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    borderWidth = _reactNative.StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? _colors.white : _colors.black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_reactNative.StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n\n  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},\n      customLabelColor = _ref2.color,\n      customLabelSize = _ref2.fontSize;\n\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n\n  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevation\n    }, buttonStyle, style]\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(_reactNative.View, {\n    style: iconStyle\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Button);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Button","disabled","compact","mode","dark","loading","icon","buttonColor","color","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","React","useRef","Animated","Value","elevation","current","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","customLabelSize","fontSize","textStyle","iconStyle","flexDirection","styles","iconReverse","_Surface","button","_TouchableRipple","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","_reactNative","content","_Icon","source","size","_ActivityIndicator","_Text","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"script"}