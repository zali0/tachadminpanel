{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _State = require(\"../State\");\n\nvar _constants = require(\"./constants\");\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = _objectWithoutProperties(_ref2, _excluded);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return _constants.EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n      this.hammer = new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var _iterator4 = _createForOfIteratorHelperLoose(argMapping.entries()), _step4; !(_step4 = _iterator4()).done;) {\n              var _ref6 = _step4.value;\n\n              var _ref7 = _slicedToArray(_ref6, 2);\n\n              var index = _ref7[0];\n\n              var _ref7$ = _slicedToArray(_ref7[1], 2);\n\n              var key = _ref7$[0];\n              var value = _ref7$[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref8) {\n      var handlerTag = _ref8.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nvar _default = GestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["gestureInstances","GestureHandler","constructor","_defineProperty","State","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","Error","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","props","ensureConfig","sync","getState","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","Hammer","INPUT_CANCEL","isFinal","onRawEvent","isFirst","setView","Manager","NativeGestureClass","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","entries","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","NodeManager","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"script"}