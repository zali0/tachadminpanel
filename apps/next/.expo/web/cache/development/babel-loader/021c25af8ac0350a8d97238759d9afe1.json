{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _PanGestureHandler = require(\"../handlers/PanGestureHandler\");\n\nvar _TapGestureHandler = require(\"../handlers/TapGestureHandler\");\n\nvar _State = require(\"../State\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_React$Component) {\n  _inherits(Swipeable, _React$Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"transX\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showLeftAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"leftActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showRightAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rightActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n\n      var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new _reactNative.Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new _reactNative.Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (ev) {\n      if (ev.nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props5 = _this.props,\n          friction = _this$props5.friction,\n          _this$props5$leftThre = _this$props5.leftThreshold,\n          leftThreshold = _this$props5$leftThre === void 0 ? leftWidth / 2 : _this$props5$leftThre,\n          _this$props5$rightThr = _this$props5.rightThreshold,\n          rightThreshold = _this$props5$rightThr === void 0 ? rightWidth / 2 : _this$props5$rightThr;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      _reactNative.Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            var _this$props$onSwipeab, _this$props;\n\n            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n          } else {\n            var _this$props$onSwipeab2, _this$props2;\n\n            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        var _this$props$onSwipeab3, _this$props3;\n\n        (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n      } else {\n        var _this$props$onSwipeab4, _this$props4;\n\n        (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRowLayout\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOffset\", function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    });\n\n    var _dragX = new _reactNative.Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new _reactNative.Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    _this.onGestureEvent = _reactNative.Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          renderLeftActions = _this$props6.renderLeftActions,\n          renderRightActions = _this$props6.renderRightActions;\n      var left = renderLeftActions && React.createElement(_reactNative.Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }]\n      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(_reactNative.View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        }\n      }));\n      var right = renderRightActions && React.createElement(_reactNative.Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }]\n      }, renderRightActions(this.showRightAction, this.transX), React.createElement(_reactNative.View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        }\n      }));\n      return React.createElement(_PanGestureHandler.PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }), React.createElement(_reactNative.Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle]\n      }, left, right, React.createElement(_TapGestureHandler.TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, React.createElement(_reactNative.Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(React.Component);\n\nexports.default = Swipeable;\n\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    flexDirection: _reactNative.I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    flexDirection: _reactNative.I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"mappings":"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","names":["DRAG_TOSS","Swipeable","constructor","props","_defineProperty","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","State","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","layout","width","undefined","updateAnimatedEvent","onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","React","_reactNative","View","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","_PanGestureHandler","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","_TapGestureHandler","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","Component","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: () => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: () => void;\n\n  /**\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: () => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}