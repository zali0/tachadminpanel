{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _excluded = [\"numberOfPointers\", \"direction\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Errors = require(\"./Errors\");\n\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(FlingGestureHandler);\n\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_RIGHT);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_LEFT);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_UP);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return _hammerjs.default.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return _hammerjs.default.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = _objectWithoutProperties(_ref3, _excluded);\n\n      if ((0, _utils.isnan)(direction) || typeof direction !== 'number') {\n        throw new _Errors.GesturePropError('direction', direction, 'number');\n      }\n\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n\n  return FlingGestureHandler;\n}(_DraggingGestureHandler.default);\n\nvar _default = FlingGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["FlingGestureHandler","Hammer","Swipe","onGestureActivated","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","onRawEvent","ev","setTimeout","cancelEvent","gesture","hammer","get","name","options","enable","onStart","getHammerConfig","pointers","config","numberOfPointers","direction","getDirection","getTargetDirections","directions","Direction","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","isGestureEnabledForEvent","_recognizer","pointerLength","maxPointers","validPointerCount","failed","success","updateGestureConfig","props","GesturePropError","DraggingGestureHandler"],"sources":["FlingGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"script"}