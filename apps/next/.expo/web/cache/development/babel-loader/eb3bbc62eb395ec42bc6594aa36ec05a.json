{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureDetector = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _gesture = require(\"./gesture\");\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _handlersRegistry = require(\"../handlersRegistry\");\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../../RNGestureHandlerModule\"));\n\nvar _gestureHandlerCommon = require(\"../gestureHandlerCommon\");\n\nvar _gestureStateManager = require(\"./gestureStateManager\");\n\nvar _FlingGestureHandler = require(\"../FlingGestureHandler\");\n\nvar _ForceTouchGestureHandler = require(\"../ForceTouchGestureHandler\");\n\nvar _LongPressGestureHandler = require(\"../LongPressGestureHandler\");\n\nvar _PanGestureHandler = require(\"../PanGestureHandler\");\n\nvar _TapGestureHandler = require(\"../TapGestureHandler\");\n\nvar _State = require(\"../../State\");\n\nvar _EventType = require(\"../../EventType\");\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), _toConsumableArray(_TapGestureHandler.tapGestureHandlerProps), _toConsumableArray(_PanGestureHandler.panGestureHandlerProps), _toConsumableArray(_PanGestureHandler.panGestureHandlerCustomNativeProps), _toConsumableArray(_LongPressGestureHandler.longPressGestureHandlerProps), _toConsumableArray(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), _toConsumableArray(_FlingGestureHandler.flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof _gesture.BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n\n    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);\n\n    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag);\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag,\n      useAnimated = _ref.useAnimated;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  var _loop = function _loop(handler) {\n    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));\n\n    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n\n      _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n\n    _loop(handler);\n  }\n\n  preparedGesture.config = gesture;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture2 = _step3.value;\n\n    _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, !useAnimated);\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      _handler.handlers.handlerTag = _handler.handlerTag;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n\n      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n\n      (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture) {\n  if (!_reanimatedWrapper.Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(event) {\n    'worklet';\n\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case _gesture.CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n\n      case _gesture.CALLBACK_TYPE.START:\n        return gesture.onStart;\n\n      case _gesture.CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n\n      case _gesture.CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n\n      case _gesture.CALLBACK_TYPE.END:\n        return gesture.onEnd;\n\n      case _gesture.CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case _EventType.EventType.TOUCHES_DOWN:\n        return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n\n      case _EventType.EventType.TOUCHES_MOVE:\n        return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n\n      case _EventType.EventType.TOUCHES_UP:\n        return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n\n      case _EventType.EventType.TOUCHES_CANCELLED:\n        return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n\n    return _gesture.CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);\n\n  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);\n\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n            runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n            runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === _State.State.END) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== _EventType.EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], true);\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nvar GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = (0, _react.useRef)(null);\n  var firstRenderRef = (0, _react.useRef)(true);\n\n  var preparedGesture = _react.default.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture);\n  }\n\n  (0, _react.useEffect)(function () {\n    firstRenderRef.current = true;\n    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  (0, _react.useEffect)(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return _react.default.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return _react.default.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\n\nexports.GestureDetector = GestureDetector;\n\nvar Wrap = function (_react$default$Compon) {\n  _inherits(Wrap, _react$default$Compon);\n\n  var _super = _createSuper(Wrap);\n\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = _react.default.Children.only(this.props.children);\n\n      return _react.default.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n\n  return Wrap;\n}(_react.default.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"mappings":"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","names":["ALLOWED_PROPS","baseGestureHandlerWithMonitorProps","tapGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","longPressGestureHandlerProps","forceTouchGestureHandlerProps","flingGestureHandlerProps","convertToHandlerTag","ref","BaseGesture","handlerTag","current","_ref$current","extractValidHandlerTags","interactionGroup","map","_interactionGroup$map2","filter","tag","dropHandlers","preparedGesture","config","handler","RNGestureHandlerModule","dropGestureHandler","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","Reanimated","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","CALLBACK_TYPE","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","EventType","UNDEFINED","runWorklet","isWorklet","args","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","State","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","GestureStateManager","create","changeEventCalculator","_gesture$changeEventC","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","_gestureConfig$toGest2","find","reduce","prev","viewRef","firstRenderRef","React","useRef","Error","_react","AnimatedWrap","onGestureHandlerEvent","children","Wrap","render","child","Children","only","cloneElement","collapsable","Component","default","_Reanimated$default","createAnimatedComponent"],"sources":["GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n      handler.handlers.handlerTag = handler.handlerTag;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture: GestureConfigReference) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    true\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"script"}