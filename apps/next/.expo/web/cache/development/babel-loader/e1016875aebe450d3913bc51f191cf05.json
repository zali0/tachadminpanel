{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  var icon = indeterminate ? 'minus' : 'check';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS);\nvar CheckboxIOSWithTheme = withTheme(CheckboxIOS);\nexport { CheckboxIOSWithTheme as CheckboxIOS };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;AA8CA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAOP;AAAA,MANXC,MAMW,QANXA,MAMW;AAAA,MALXC,QAKW,QALXA,QAKW;AAAA,MAJXC,OAIW,QAJXA,OAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,MADRC,IACQ;;AACX,MAAMC,OAAO,GAAGN,MAAM,KAAK,SAA3B;AACA,MAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;AAEA,MAAMQ,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,GAEzBI,IAAI,CAACV,KAALU,IAAcF,KAAK,CAACM,MAANN,CAAaO,MAF/B;AAIA,MAAIC,WAAJ;;AAEA,MAAIV,QAAJ,EAAc;AACZU,eAAW,GAAGhB,KAAK,CAACQ,KAAK,CAACM,MAANN,CAAaS,IAAd,CAALjB,CAAyBkB,KAAzBlB,CAA+B,IAA/BA,EAAqCmB,GAArCnB,GAA2CoB,MAA3CpB,EAAdgB;AADF,SAEO;AACLA,eAAW,GAAGhB,KAAK,CAACa,YAAD,CAALb,CAAoBqB,IAApBrB,CAAyB,IAAzBA,EAA+BmB,GAA/BnB,GAAqCoB,MAArCpB,EAAdgB;AACD;;AAED,MAAMM,IAAI,GAAGV,aAAa,GAAG,OAAH,GAAa,OAAvC;AAEA,SACEb,oBAACG,eAAD,eACMQ,IADN;AAEEa,cAAU,MAFZ;AAGEP,eAAW,EAAEA,WAHf;AAIET,WAAO,EAAEA,OAJX;AAKED,YAAQ,EAAEA,QALZ;AAOEkB,uBAAmB,EAAElB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAP3D;AAQEmB,8BAA0B,EAAC,QAR7B;AASEC,qBAAiB,EAAC,UATpB;AAUEC,sBAAkB,EAAE;AAAErB,cAAF,EAAEA,QAAF;AAAYK;AAAZ,KAVtB;AAWEiB,2BAAuB,EAAC,QAX1B;AAYEC,SAAK,EAAEC,MAAM,CAACC,SAZhB;AAaEtB,UAAM,EAAEA;AAbV,MAeEV,oBAACiC,IAAD;AAAMH,SAAK,EAAE;AAAEI,aAAO,EAAErB,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;AAA1C;AAAb,KACEb,oBAACE,qBAAD;AACEiC,oBAAgB,EAAE,KADpB;AAEEC,QAAI,EAAEb,IAFR;AAGEc,QAAI,EAAE,EAHR;AAIEpC,SAAK,EAAEa,YAJT;AAKEwB,aAAS,EAAC;AALZ,IADF,CAfF,CADF;AAzBF;;AAsDAjC,WAAW,CAACkC,WAAZlC,GAA0B,cAA1BA;AAEA,IAAM0B,MAAM,GAAGS,UAAU,CAACC,MAAXD,CAAkB;AAC/BR,WAAS,EAAE;AACTU,gBAAY,EAAE,EADL;AAETC,WAAO,EAAE;AAFA;AADoB,CAAlBH,CAAf;AAOA,eAAepC,SAAS,CAACC,WAAD,CAAxB;AAGA,IAAMuC,oBAAoB,GAAGxC,SAAS,CAACC,WAAD,CAAtC;AAEA,SAASuC,oBAAoB,IAAIvC,WAAjC","names":["React","color","MaterialCommunityIcon","TouchableRipple","withTheme","CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","opacity","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","CheckboxIOSWithTheme"],"sources":["CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}