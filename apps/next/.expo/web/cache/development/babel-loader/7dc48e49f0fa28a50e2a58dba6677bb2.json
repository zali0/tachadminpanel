{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _AnimatedText = _interopRequireDefault(require(\"./Typography/AnimatedText\"));\n\nvar _theming = require(\"../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar HelperText = function HelperText(_ref) {\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n      maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors.error : (0, _color.default)(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(_AnimatedText.default, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, rest), rest.children);\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\n\nvar _default = (0, _theming.withTheme)(HelperText);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["HelperText","style","type","visible","theme","onLayout","padding","rest","React","useRef","Animated","Value","shown","current","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","_AnimatedText","styles","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"script"}