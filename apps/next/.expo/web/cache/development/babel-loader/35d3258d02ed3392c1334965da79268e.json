{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"children\", \"size\", \"style\", \"theme\", \"visible\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../utils/getContrastingColor\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar defaultSize = 20;\n\nvar Badge = function Badge(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n      opacity = _React$useRef.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    _reactNative.Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);\n  var borderRadius = size / 2;\n  return React.createElement(_reactNative.Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [_objectSpread(_objectSpread({\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5\n    }, theme.fonts.regular), {}, {\n      lineHeight: size,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }), styles.container, restStyle]\n  }, rest), children);\n};\n\nvar _default = (0, _theming.withTheme)(Badge);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAkDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOD;AAAA,MANXC,QAMW,QANXA,QAMW;AAAA,uBALXC,IAKW;AAAA,MALXA,IAKW,0BALJH,WAKI;AAAA,MAJXI,KAIW,QAJXA,KAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,0BAFXC,OAEW;AAAA,MAFXA,OAEW,6BAFD,IAEC;AAAA,MADRC,IACQ;;AACX,sBAA6BC,KAAK,CAACC,MAAND,CAC3B,IAAIE,sBAASC,KAAb,CAAmBL,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD2BE,CAA7B;AAAA,MAAiBI,OAAjB,iBAAQC,OAAR;;AAGA,MAAMC,gBAAgB,GAAGN,KAAK,CAACC,MAAND,CAAsB,IAAtBA,CAAzB;AAEA,MACeO,KADf,GAEIV,KAFJ,CACEW,SADF,CACeD,KADf;AAIAP,OAAK,CAACS,SAANT,CAAgB,YAAM;AAEpB,QAAIM,gBAAgB,CAACD,OAArB,EAA8B;AAC5BC,sBAAgB,CAACD,OAAjBC,GAA2B,KAA3BA;AACA;AACD;;AAEDJ,0BAASQ,MAATR,CAAgBE,OAAhBF,EAAyB;AACvBS,aAAO,EAAEb,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBc,cAAQ,EAAE,MAAML,KAFO;AAGvBM,qBAAe,EAAE;AAHM,KAAzBX,EAIGY,KAJHZ;AAPF,KAYG,CAACJ,OAAD,EAAUM,OAAV,EAAmBG,KAAnB,CAZHP;;AAcA,cACGe,wBAAWC,OAAXD,CAAmBnB,KAAnBmB,KAA6B,EADhC;AAAA,oCAAQE,eAAR;AAAA,MAAQA,eAAR,sCAA0BpB,KAAK,CAACqB,MAANrB,CAAasB,YAAvC;AAAA,MAAwDC,SAAxD;;AAGA,MAAMC,SAAS,GAAG,kCAAoBJ,eAApB,EAAqCK,aAArC,EAA4CC,aAA5C,CAAlB;AAEA,MAAMC,YAAY,GAAG7B,IAAI,GAAG,CAA5B;AAEA,SACEK,oBAACyB,sBAASC,IAAV;AACEC,iBAAa,EAAE,CADjB;AAEE/B,SAAK,EAAE;AAEHQ,aADF,EACEA,OAFG;AAGHa,qBAFF,EAEEA,eAHG;AAIHW,WAAK,EAAEP,SAJJ;AAKHQ,cAAQ,EAAElC,IAAI,GAAG;AALd,OAMAE,KAAK,CAACiC,KAANjC,CAAYkC,OANZ;AAOHC,gBAAU,EAAErC,IAPT;AAQHsC,YAAM,EAAEtC,IARL;AASHuC,cAAQ,EAAEvC,IATP;AAUH6B;AAVG,QAYLW,MAAM,CAACC,SAZF,EAaLhB,SAbK;AAFT,KAiBMrB,IAjBN,GAmBGL,QAnBH,CADF;AAtCF;;eA+De,wBAAUD,KAAV;;;;AAEf,IAAM0C,MAAM,GAAGpB,wBAAWsB,MAAXtB,CAAkB;AAC/BqB,WAAS,EAAE;AACTE,aAAS,EAAE,UADF;AAETC,aAAS,EAAE,QAFF;AAGTC,qBAAiB,EAAE,QAHV;AAITC,qBAAiB,EAAE,CAJV;AAKTC,YAAQ,EAAE;AALD;AADoB,CAAlB3B,CAAf","names":["defaultSize","Badge","children","size","style","theme","visible","rest","React","useRef","Animated","Value","opacity","current","isFirstRendering","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","white","black","borderRadius","_reactNative","Text","numberOfLines","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"sources":["Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}