{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useLayout() {\n  var _React$useState = React.useState({\n    height: 0,\n    width: 0,\n    measured: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var onLayout = React.useCallback(function (e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    setLayout({\n      height: height,\n      width: width,\n      measured: true\n    });\n  }, [layout.height, layout.width]);\n  return [layout, onLayout];\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,eAAe,SAASC,SAAT,GAAqB;AAClC,wBAA4BD,KAAK,CAACE,QAANF,CAIzB;AAAEG,UAAM,EAAE,CAAV;AAAaC,SAAK,EAAE,CAApB;AAAuBC,YAAQ,EAAE;AAAjC,GAJyBL,CAA5B;AAAA;AAAA,MAAOM,MAAP;AAAA,MAAeC,SAAf;;AAMA,MAAMC,QAAQ,GAAGR,KAAK,CAACS,WAANT,CACdU,WAAD,EAA0B;AACxB,gCAA0BA,CAAC,CAACC,WAAFD,CAAcJ,MAAxC;AAAA,QAAQH,MAAR,yBAAQA,MAAR;AAAA,QAAgBC,KAAhB,yBAAgBA,KAAhB;;AAEA,QAAID,MAAM,KAAKG,MAAM,CAACH,MAAlBA,IAA4BC,KAAK,KAAKE,MAAM,CAACF,KAAjD,EAAwD;AACtD;AACD;;AAEDG,aAAS,CAAC;AACRJ,YADQ,EACRA,MADQ;AAERC,WAFQ,EAERA,KAFQ;AAGRC,cAAQ,EAAE;AAHF,KAAD,CAATE;AARa,KAcf,CAACD,MAAM,CAACH,MAAR,EAAgBG,MAAM,CAACF,KAAvB,CAdeJ,CAAjB;AAiBA,SAAO,CAACM,MAAD,EAASE,QAAT,CAAP;AACD","names":["React","useLayout","useState","height","width","measured","layout","setLayout","onLayout","useCallback","e","nativeEvent"],"sources":["useLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\n\nexport default function useLayout() {\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    width: number;\n    measured: boolean;\n  }>({ height: 0, width: 0, measured: false });\n\n  const onLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      const { height, width } = e.nativeEvent.layout;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      setLayout({\n        height,\n        width,\n        measured: true,\n      });\n    },\n    [layout.height, layout.width]\n  );\n\n  return [layout, onLayout] as const;\n}\n"]},"metadata":{},"sourceType":"module"}