{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RadioButtonIOS = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      status = _ref.status,\n      value = _ref.value,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {\n    var checked = (0, _utils.isChecked)({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        (0, _utils.handlePress)({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(_reactNative.View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(_MaterialCommunityIcon.default, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\n\nvar _default = (0, _theming.withTheme)(RadioButtonIOS);\n\nexports.default = _default;\nvar RadioButtonIOSWithTheme = (0, _theming.withTheme)(RadioButtonIOS);\nexports.RadioButtonIOS = RadioButtonIOSWithTheme;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAQV;AAAA,MAPXC,QAOW,QAPXA,QAOW;AAAA,MANXC,OAMW,QANXA,OAMW;AAAA,MALXC,KAKW,QALXA,KAKW;AAAA,MAJXC,MAIW,QAJXA,MAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,MADRC,IACQ;;AACX,MAAMC,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,GAEzBM,IAAI,CAACG,KAALH,IAAcJ,KAAK,CAACM,MAANN,CAAaQ,MAF/B;AAIA,MAAIC,WAAJ;;AAEA,MAAIX,QAAJ,EAAc;AACZW,eAAW,GAAG,oBAAMT,KAAK,CAACM,MAANN,CAAaU,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAdJ;AADF,SAEO;AACLA,eAAW,GAAG,oBAAMJ,YAAN,EAAoBS,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAdJ;AACD;;AAED,SACEM,oBAACC,qCAAmBC,QAApB,QACIC,iBAAD,EAAsC;AACrC,QAAMC,OAAO,GACX,sBAAU;AACRC,kBAAY,EAAEF,OAAF,SAAEA,WAAF,WAAEA,GAAF,MAAEA,UAAO,CAAEhB,KADf;AAERD,YAFQ,EAERA,MAFQ;AAGRC;AAHQ,KAAV,MAIO,SALT;AAOA,WACEa,oBAACM,wBAAD,eACMjB,IADN;AAEEkB,gBAAU,MAFZ;AAGEb,iBAAW,EAAEA,WAHf;AAIEV,aAAO,EACLD,QAAQ,GACJyB,SADI,GAEJ,YAAM;AACJ,gCAAY;AACVxB,iBADU,EACVA,OADU;AAEVG,eAFU,EAEVA,KAFU;AAGVsB,uBAAa,EAAEN,OAAF,SAAEA,WAAF,WAAEA,GAAF,MAAEA,UAAO,CAAEM;AAHd,SAAZ;AARV;AAgBEC,yBAAmB,EAAE3B,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAhB3D;AAiBE4B,gCAA0B,EACxBP,OAAO,GAAG,qBAAH,GAA2B,uBAlBtC;AAoBEQ,uBAAiB,EAAC,OApBpB;AAqBEC,wBAAkB,EAAE;AAAE9B,gBAAF,EAAEA,QAAF;AAAYqB;AAAZ,OArBtB;AAsBEU,6BAAuB,EAAC,QAtB1B;AAuBEC,WAAK,EAAEC,MAAM,CAACC,SAvBhB;AAwBE7B,YAAM,EAAEA;AAxBV,QA0BEY,oBAACkB,iBAAD;AAAMH,WAAK,EAAE;AAAEI,eAAO,EAAEf,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,OACEJ,oBAACoB,8BAAD;AACEC,sBAAgB,EAAE,KADpB;AAEEC,UAAI,EAAC,OAFP;AAGEC,UAAI,EAAE,EAHR;AAIE/B,WAAK,EAAEF,YAJT;AAKEkC,eAAS,EAAC;AALZ,MADF,CA1BF,CADF;AATJ,IADF;AArBF;;AA0EA1C,cAAc,CAAC2C,WAAf3C,GAA6B,iBAA7BA;;AAEA,IAAMkC,MAAM,GAAGU,wBAAWC,MAAXD,CAAkB;AAC/BT,WAAS,EAAE;AACTW,gBAAY,EAAE,EADL;AAETC,WAAO,EAAE;AAFA;AADoB,CAAlBH,CAAf;;eAOe,wBAAU5C,cAAV;;;AAGf,IAAMgD,uBAAuB,GAAG,wBAAUhD,cAAV,CAAhC","names":["RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","React","_RadioButtonGroup","Consumer","context","checked","contextValue","_TouchableRipple","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","opacity","_MaterialCommunityIcon","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"script"}