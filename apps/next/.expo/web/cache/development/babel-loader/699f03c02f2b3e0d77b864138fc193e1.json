{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\n\nvar MenuItem = function MenuItem(_ref) {\n  var icon = _ref.icon,\n      title = _ref.title,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      contentStyle = _ref.contentStyle,\n      testID = _ref.testID,\n      titleStyle = _ref.titleStyle,\n      accessibilityLabel = _ref.accessibilityLabel,\n      theme = _ref.theme;\n  var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"menuitem\",\n    accessibilityState: {\n      disabled: disabled\n    }\n  }, React.createElement(View, {\n    style: styles.row\n  }, icon ? React.createElement(View, {\n    style: [styles.item, styles.icon],\n    pointerEvents: \"box-none\"\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: iconColor\n  })) : null, React.createElement(View, {\n    style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n    pointerEvents: \"none\"\n  }, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title))));\n};\n\nMenuItem.displayName = 'Menu.Item';\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);","map":{"version":3,"mappings":"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","names":["color","React","Icon","TouchableRipple","Text","black","white","withTheme","MenuItem","icon","title","disabled","onPress","style","contentStyle","testID","titleStyle","accessibilityLabel","theme","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","accessibilityRole","accessibilityState","View","row","item","pointerEvents","source","size","content","widthWithIcon","selectable","numberOfLines","displayName","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["MenuItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]},"metadata":{},"sourceType":"module"}