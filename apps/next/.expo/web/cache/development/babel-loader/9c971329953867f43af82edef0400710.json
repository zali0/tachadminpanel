{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getAdornmentConfig = getAdornmentConfig;\nexports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TextInputIcon = _interopRequireWildcard(require(\"./TextInputIcon\"));\n\nvar _TextInputAffix = _interopRequireWildcard(require(\"./TextInputAffix\"));\n\nvar _constants = require(\"../constants\");\n\nvar _enums = require(\"./enums\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: _enums.AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: _enums.AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && _react.default.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === _TextInputAffix.default) {\n          type = _enums.AdornmentType.Affix;\n        } else if (adornment.type === _TextInputIcon.default) {\n          type = _enums.AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nfunction getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === _enums.AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? _constants.ADORNMENT_OFFSET + _constants.OUTLINED_INPUT_OFFSET : _constants.ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === _enums.AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, _defineProperty(_ref7, marginKey, isAffix ? 0 : offset), _defineProperty(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n      left = _ref5.left,\n      right = _ref5.right,\n      onAffixChange = _ref5.onAffixChange,\n      textStyle = _ref5.textStyle,\n      visible = _ref5.visible,\n      topPosition = _ref5.topPosition,\n      isTextInputFocused = _ref5.isTextInputFocused,\n      forceFocus = _ref5.forceFocus,\n      paddingHorizontal = _ref5.paddingHorizontal,\n      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n\n  if (adornmentConfig.length) {\n    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n          side = _ref6.side;\n      var inputAdornmentComponent;\n\n      if (side === _enums.AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === _enums.AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === _enums.AdornmentType.Icon) {\n        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[_enums.AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === _enums.AdornmentType.Affix) {\n        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[_enums.AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar _default = TextInputAdornment;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","_react","inputAdornmentComponent","commonProps","key","testID","_TextInputIcon","icon","_TextInputAffix","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"script"}