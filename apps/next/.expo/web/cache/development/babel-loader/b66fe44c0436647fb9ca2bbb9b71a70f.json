{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ListAccordionGroupContext = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar ListAccordionGroupContext = React.createContext(null);\nexports.ListAccordionGroupContext = ListAccordionGroupContext;\n\nvar ListAccordionGroup = function ListAccordionGroup(_ref) {\n  var expandedIdProp = _ref.expandedId,\n      onAccordionPress = _ref.onAccordionPress,\n      children = _ref.children;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedId = _React$useState2[0],\n      setExpandedId = _React$useState2[1];\n\n  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {\n    setExpandedId(function (currentExpandedId) {\n      return currentExpandedId === newExpandedId ? undefined : newExpandedId;\n    });\n  };\n\n  return React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\nvar _default = ListAccordionGroup;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAMA,yBAAyB,GACpCC,KAAK,CAACC,aAAND,CAAmD,IAAnDA,CADK;;;AAwCP,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,OAId;AAAA,MAHCC,cAGD,QAHXC,UAGW;AAAA,MAFXC,gBAEW,QAFXA,gBAEW;AAAA,MADXC,QACW,QADXA,QACW;;AACX,wBAAoCN,KAAK,CAACO,QAANP,CAElCQ,SAFkCR,CAApC;AAAA;AAAA,MAAOI,UAAP;AAAA,MAAmBK,aAAnB;;AAIA,MAAMC,uBAAuB,GAAIC,SAA3BD,uBAA2BC,cAAD,EAAoC;AAClEF,iBAAa,CAAEG,2BAAD;AAAA,aACZA,iBAAiB,KAAKD,aAAtBC,GAAsCJ,SAAtCI,GAAkDD,aADtC;AAAA,KAAD,CAAbF;AADF;;AAMA,SACET,oBAACD,yBAAD,CAA2Bc,QAA3B;AACEC,SAAK,EAAE;AACLV,gBAAU,EAAED,cAAc,IAAIC,UADzB;AAELC,sBAAgB,EAAEA,gBAAgB,IAAIK;AAFjC;AADT,KAMGJ,QANH,CADF;AAfF;;AA2BAJ,kBAAkB,CAACa,WAAnBb,GAAiC,qBAAjCA;eAEeA","names":["ListAccordionGroupContext","React","createContext","ListAccordionGroup","expandedIdProp","expandedId","onAccordionPress","children","useState","undefined","setExpandedId","onAccordionPressDefault","newExpandedId","currentExpandedId","Provider","value","displayName"],"sources":["ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext =\n  React.createContext<ListAccordionGroupContextType>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"script"}