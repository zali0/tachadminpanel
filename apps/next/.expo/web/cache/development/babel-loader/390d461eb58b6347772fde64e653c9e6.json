{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _excluded = [\"name\", \"onPress\", \"forceTextInputFocus\", \"color\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.IconAdornment = exports.ICON_SIZE = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _IconButton = _interopRequireDefault(require(\"../../IconButton\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ICON_SIZE = 24;\nexports.ICON_SIZE = ICON_SIZE;\nvar ICON_OFFSET = 12;\n\nvar StyleContext = _react.default.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {}\n});\n\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n      topPosition = _ref.topPosition,\n      side = _ref.side,\n      isTextInputFocused = _ref.isTextInputFocused,\n      forceFocus = _ref.forceFocus;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus\n  };\n  return _react.default.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nexports.IconAdornment = IconAdornment;\n\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var name = _ref2.name,\n      onPress = _ref2.onPress,\n      forceTextInputFocus = _ref2.forceTextInputFocus,\n      color = _ref2.color,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n\n  var _react$default$useCon = _react.default.useContext(StyleContext),\n      style = _react$default$useCon.style,\n      isTextInputFocused = _react$default$useCon.isTextInputFocused,\n      forceFocus = _react$default$useCon.forceFocus;\n\n  var onPressWithFocusControl = _react.default.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return _react.default.createElement(_reactNative.View, {\n    style: [styles.container, style]\n  }, _react.default.createElement(_IconButton.default, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    color: typeof color === 'function' ? color(isTextInputFocused) : color\n  }, rest)));\n};\n\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\n\nvar _default = TextInputIcon;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,IAAMA,SAAS,GAAG,EAAlB;;AACP,IAAMC,WAAW,GAAG,EAApB;;AAQA,IAAMC,YAAY,GAAGC,eAAMC,aAAND,CAAsC;AACzDE,OAAK,EAAE,EADkD;AAEzDC,oBAAkB,EAAE,KAFqC;AAGzDC,YAAU,EAAE,sBAAM,CAAE;AAHqC,CAAtCJ,CAArB;;AAMA,IAAMK,aAOL,GAAG,SAPEA,aAOF,OAAiE;AAAA,MAA9DC,IAA8D,QAA9DA,IAA8D;AAAA,MAAxDC,WAAwD,QAAxDA,WAAwD;AAAA,MAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,MAArCL,kBAAqC,QAArCA,kBAAqC;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACnE,MAAMF,KAAK;AACTO,OAAG,EAAEF;AADI,KAERC,IAFQ,EAEDV,WAFC,CAAX;;AAIA,MAAMY,YAAY,GAAG;AAAER,SAAF,EAAEA,KAAF;AAASC,sBAAT,EAASA,kBAAT;AAA6BC;AAA7B,GAArB;AAEA,SACEO,6BAACZ,YAAD,CAAca,QAAd;AAAuBC,SAAK,EAAEH;AAA9B,KAA6CJ,IAA7C,CADF;AAdF;;;;AAiDA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,QAMT;AAAA,MALXC,IAKW,SALXA,IAKW;AAAA,MAJXC,OAIW,SAJXA,OAIW;AAAA,MAHXC,mBAGW,SAHXA,mBAGW;AAAA,MAFXC,KAEW,SAFXA,KAEW;AAAA,MADRC,IACQ;;AACX,8BACEnB,eAAMoB,UAANpB,CAAiBD,YAAjBC,CADF;AAAA,MAAQE,KAAR,yBAAQA,KAAR;AAAA,MAAeC,kBAAf,yBAAeA,kBAAf;AAAA,MAAmCC,UAAnC,yBAAmCA,UAAnC;;AAGA,MAAMiB,uBAAuB,GAAGrB,eAAMsB,WAANtB,CAAkB,YAAM;AACtD,QAAIiB,mBAAmB,IAAI,CAACd,kBAA5B,EAAgD;AAC9CC,gBAAU;AACX;;AACDY,WAAO,SAAPA,WAAO,WAAPA,mBAAO,EAAPA;AAJ8B,KAK7B,CAACC,mBAAD,EAAsBb,UAAtB,EAAkCD,kBAAlC,EAAsDa,OAAtD,CAL6BhB,CAAhC;;AAOA,SACEW,6BAACY,iBAAD;AAAMrB,SAAK,EAAE,CAACsB,MAAM,CAACC,SAAR,EAAmBvB,KAAnB;AAAb,KACES,6BAACe,mBAAD;AACEpB,QAAI,EAAES,IADR;AAEEb,SAAK,EAAEsB,MAAM,CAACG,UAFhB;AAGEC,QAAI,EAAE/B,SAHR;AAIEmB,WAAO,EAAEK,uBAJX;AAKEH,SAAK,EAAE,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACf,kBAAD,CAAnC,GAA0De;AALnE,KAMMC,IANN,EADF,CADF;AAjBF;;AA8BAL,aAAa,CAACe,WAAdf,GAA4B,gBAA5BA;AAEAA,aAAa,CAACgB,YAAdhB,GAA6B;AAC3BG,qBAAmB,EAAE;AADM,CAA7BH;;AAIA,IAAMU,MAAM,GAAGO,wBAAWC,MAAXD,CAAkB;AAC/BN,WAAS,EAAE;AACTQ,YAAQ,EAAE,UADD;AAETC,SAAK,EAAErC,SAFE;AAGTsC,UAAM,EAAEtC,SAHC;AAITuC,kBAAc,EAAE,QAJP;AAKTC,cAAU,EAAE;AALH,GADoB;AAQ/BV,YAAU,EAAE;AACVW,UAAM,EAAE;AADE;AARmB,CAAlBP,CAAf;;eAaejB","names":["ICON_SIZE","ICON_OFFSET","StyleContext","React","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","_react","Provider","value","TextInputIcon","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","_reactNative","styles","container","_IconButton","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"script"}