{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"children\", \"textStyle\", \"style\", \"numeric\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar DataTableCell = function DataTableCell(_ref) {\n  var children = _ref.children,\n      textStyle = _ref.textStyle,\n      style = _ref.style,\n      numeric = _ref.numeric,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n    style: [styles.container, numeric && styles.right, style]\n  }), React.createElement(_Text.default, {\n    style: textStyle,\n    numberOfLines: 1\n  }, children));\n};\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  right: {\n    justifyContent: 'flex-end'\n  }\n});\n\nvar _default = DataTableCell;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MACpBC,QADoB,QACpBA,QADoB;AAAA,MAEpBC,SAFoB,QAEpBA,SAFoB;AAAA,MAGpBC,KAHoB,QAGpBA,KAHoB;AAAA,MAIpBC,OAJoB,QAIpBA,OAJoB;AAAA,MAKjBC,IALiB;;AAAA,SAOpBC,oBAACC,wBAAD,eACMF,IADN;AAEEF,SAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBL,OAAO,IAAII,MAAM,CAACE,KAArC,EAA4CP,KAA5C;AAFT,MAIEG,oBAACK,aAAD;AAAMR,SAAK,EAAED,SAAb;AAAwBU,iBAAa,EAAE;AAAvC,KACGX,QADH,CAJF,CAPoB;AAAtB;;AAiBAD,aAAa,CAACa,WAAdb,GAA4B,gBAA5BA;;AAEA,IAAMQ,MAAM,GAAGM,wBAAWC,MAAXD,CAAkB;AAC/BL,WAAS,EAAE;AACTO,QAAI,EAAE,CADG;AAETC,iBAAa,EAAE,KAFN;AAGTC,cAAU,EAAE;AAHH,GADoB;AAO/BR,OAAK,EAAE;AACLS,kBAAc,EAAE;AADX;AAPwB,CAAlBL,CAAf;;eAYed","names":["DataTableCell","children","textStyle","style","numeric","rest","React","_TouchableRipple","styles","container","right","_Text","numberOfLines","displayName","StyleSheet","create","flex","flexDirection","alignItems","justifyContent"],"sources":["DataTableCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Text content style of the `DataTableCell`.\n   */\n  textStyle?: StyleProp<TextStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({\n  children,\n  textStyle,\n  style,\n  numeric,\n  ...rest\n}: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text style={textStyle} numberOfLines={1}>\n      {children}\n    </Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n"]},"metadata":{},"sourceType":"script"}