{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\"));\n\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\n\nvar _colors = require(\"../../styles/colors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ToggleButton);\n\nexports.default = _default;\nvar ToggleButtonWithTheme = (0, _theming.withTheme)(ToggleButton);\nexports.ToggleButton = ToggleButtonWithTheme;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAWR;AAAA,MAVXC,IAUW,QAVXA,IAUW;AAAA,MATXC,IASW,QATXA,IASW;AAAA,MARXC,KAQW,QARXA,KAQW;AAAA,MAPXC,kBAOW,QAPXA,kBAOW;AAAA,MANXC,QAMW,QANXA,QAMW;AAAA,MALXC,KAKW,QALXA,KAKW;AAAA,MAJXC,KAIW,QAJXA,KAIW;AAAA,MAHXC,MAGW,QAHXA,MAGW;AAAA,MAFXC,QAEW,QAFXA,OAEW;AAAA,MADRC,IACQ;;AACX,MAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,SACEC,oBAACC,4CAAyBC,QAA1B,QACIC,iBAAD,EAAuE;AACtE,QAAIC,eAAJ;AAEA,QAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACT,KAARS,KAAkBT,KAA7BS,IAAuCR,MAAM,KAAK,SADrD;;AAGA,QAAIU,OAAJ,EAAa;AACXD,qBAAe,GAAGd,KAAK,CAACgB,IAANhB,GACd,0BADcA,GAEd,oBAFJc;AADF,WAIO;AACLA,qBAAe,GAAG,aAAlBA;AACD;;AAED,WACEJ,oBAACO,mBAAD;AACEC,gBAAU,EAAE,KADd;AAEEpB,UAAI,EAAEA,IAFR;AAGEQ,aAAO,EAAGa,kBAAD,EAAwC;AAC/C,YAAIb,QAAJ,EAAa;AACXA,kBAAO,CAACa,CAAD,CAAPb;AACD;;AAED,YAAIO,OAAJ,EAAa;AACXA,iBAAO,CAACO,aAARP,CAAsB,CAACE,OAAD,GAAWX,KAAX,GAAmB,IAAzCS;AACD;AAVL;AAYEd,UAAI,EAAEA,IAZR;AAaEE,wBAAkB,EAAEA,kBAbtB;AAcEoB,wBAAkB,EAAE;AAAEnB,gBAAF,EAAEA,QAAF;AAAYoB,gBAAQ,EAAEP;AAAtB,OAdtB;AAeEb,cAAQ,EAAEA,QAfZ;AAgBEC,WAAK,EAAE,CACLoB,MAAM,CAACC,OADF,EAEL;AACEV,uBADF,EACEA,eADF;AAEEN,oBAFF,EAEEA,YAFF;AAGEiB,mBAAW,EAAE,oBAAMzB,KAAK,CAACgB,IAANhB,GAAa0B,aAAb1B,GAAqB2B,aAA3B,EACVC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;AAHf,OAFK,EAUL3B,KAVK;AAhBT,OA4BMI,IA5BN,EADF;AAfJ,IADF;AAdF;;AAmEA,IAAMgB,MAAM,GAAGQ,wBAAWC,MAAXD,CAAkB;AAC/BP,SAAO,EAAE;AACPS,SAAK,EAAE,EADA;AAEPC,UAAM,EAAE,EAFD;AAGPC,UAAM,EAAE;AAHD;AADsB,CAAlBJ,CAAf;;eAQe,wBAAUlC,YAAV;;;AAGf,IAAMuC,qBAAqB,GAAG,wBAAUvC,YAAV,CAA9B","names":["ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","React","_ToggleButtonGroup","Consumer","context","backgroundColor","checked","dark","_IconButton","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","white","black","alpha","rgb","string","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"script"}