{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n      maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n\n  var labelStyle = _objectSpread(_objectSpread({}, font), {}, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label), React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)) : null;\n};\n\nvar styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"mappings":"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","names":["React","AnimatedText","InputLabel","props","parentState","labelBackground","labelProps","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","Animated","View","pointerEvents","style","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}