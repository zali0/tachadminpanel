{"ast":null,"code":"import { Direction } from \"./web/constants\";\nimport FlingGestureHandler from \"./web/FlingGestureHandler\";\nimport LongPressGestureHandler from \"./web/LongPressGestureHandler\";\nimport NativeViewGestureHandler from \"./web/NativeViewGestureHandler\";\nimport * as NodeManager from \"./web/NodeManager\";\nimport PanGestureHandler from \"./web/PanGestureHandler\";\nimport PinchGestureHandler from \"./web/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/RotationGestureHandler\";\nimport TapGestureHandler from \"./web/TapGestureHandler\";\nexport var Gestures = {\n  PanGestureHandler: PanGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  FlingGestureHandler: FlingGestureHandler\n};\nexport default {\n  Direction: Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _usingDeviceEvents, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT;AACA,OAAOC,mBAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,wBAAP;AACA,OAAO,KAAKC,WAAZ;AACA,OAAOC,iBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,iBAAP;AAEA,OAAO,IAAMC,QAAQ,GAAG;AACtBJ,mBADsB,EACtBA,iBADsB;AAEtBE,wBAFsB,EAEtBA,sBAFsB;AAGtBD,qBAHsB,EAGtBA,mBAHsB;AAItBE,mBAJsB,EAItBA,iBAJsB;AAKtBL,0BALsB,EAKtBA,wBALsB;AAMtBD,yBANsB,EAMtBA,uBANsB;AAOtBD,qBAPsB,EAOtBA;AAPsB,CAAjB;AAWP,eAAe;AACbD,WADa,EACbA,SADa;AAEbU,sBAFa,gCAEQC,GAFR,EAEqBC,oBAFrB,EAEoD;AAC/DC,WAAO,CAACC,IAARD,CAAa,wBAAbA,EAAuCF,GAAvCE,EAA4CD,oBAA5CC;AAHW;AAKbE,wBALa,oCAKY;AACvBF,WAAO,CAACC,IAARD,CAAa,0BAAbA;AANW;AAQbG,sBARa,gCASXC,WATW,EAUXC,UAVW,EAWXC,MAXW,EAYX;AAEA,QAAI,EAAEF,WAAW,IAAIR,QAAjB,CAAJ,EACE,MAAM,IAAIW,KAAJ,oCAC6BH,WAD7B,+BAAN;AAGF,QAAMI,YAAY,GAAGZ,QAAQ,CAACQ,WAAD,CAA7B;AACAb,eAAW,CAACY,oBAAZZ,CAAiCc,UAAjCd,EAA6C,IAAIiB,YAAJ,EAA7CjB;AACA,SAAKkB,oBAAL,CAA0BJ,UAA1B,EAAsCC,MAAtC;AApBW;AAsBbI,sBAtBa,gCAuBXL,UAvBW,EAwBXM,OAxBW,EAyBXC,kBAzBW,EA0BXC,QA1BW,EA2BX;AACAtB,eAAW,CAACuB,UAAZvB,CAAuBc,UAAvBd,EAAmCwB,OAAnCxB,CAA2CoB,OAA3CpB,EAAoDsB,QAApDtB;AA5BW;AA8BbkB,sBA9Ba,gCA8BQJ,UA9BR,EA8B4BW,SA9B5B,EA8B4C;AACvDzB,eAAW,CAACuB,UAAZvB,CAAuBc,UAAvBd,EAAmC0B,mBAAnC1B,CAAuDyB,SAAvDzB;AA/BW;AAiCb2B,uBAjCa,iCAiCSb,UAjCT,EAiC6B;AACxC,WAAOd,WAAW,CAACuB,UAAZvB,CAAuBc,UAAvBd,CAAP;AAlCW;AAoCb4B,oBApCa,8BAoCMd,UApCN,EAoC0B;AACrCd,eAAW,CAAC4B,kBAAZ5B,CAA+Bc,UAA/Bd;AACD;AAtCY,CAAf","names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","_usingDeviceEvents","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"sources":["RNGestureHandlerModule.web.ts"],"sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _usingDeviceEvents: boolean,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}