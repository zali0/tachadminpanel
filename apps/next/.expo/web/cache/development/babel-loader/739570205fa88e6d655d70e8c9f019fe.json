{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"index\", \"total\", \"style\", \"theme\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CardCover = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CardCover = function CardCover(_ref) {\n  var index = _ref.index,\n      total = _ref.total,\n      style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var roundness = theme.roundness;\n  var coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness\n    };\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: [styles.container, coverStyle, style]\n  }, React.createElement(_reactNative.Image, _extends({}, rest, {\n    style: [styles.image, coverStyle]\n  })));\n};\n\nexports.CardCover = CardCover;\nCardCover.displayName = 'Card.Cover';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: _colors.grey200,\n    overflow: 'hidden'\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CardCover);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAAoD;AAAA,MAAjDC,KAAiD,QAAjDA,KAAiD;AAAA,MAA1CC,KAA0C,QAA1CA,KAA0C;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAAlBC,IAAkB;;AACpE,MAAQC,SAAR,GAAsBF,KAAtB,CAAQE,SAAR;AAEA,MAAIC,UAAJ;;AAEA,MAAIN,KAAK,KAAK,CAAd,EAAiB;AACf,QAAIC,KAAK,KAAK,CAAd,EAAiB;AACfK,gBAAU,GAAG;AACXC,oBAAY,EAAEF;AADH,OAAbC;AADF,WAIO;AACLA,gBAAU,GAAG;AACXE,2BAAmB,EAAEH,SADV;AAEXI,4BAAoB,EAAEJ;AAFX,OAAbC;AAID;AAVH,SAWO,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;AAC3DK,cAAU,GAAG;AACXI,4BAAsB,EAAEL;AADb,KAAbC;AAGD;;AAED,SACEK,oBAACC,iBAAD;AAAMV,SAAK,EAAE,CAACW,MAAM,CAACC,SAAR,EAAmBR,UAAnB,EAA+BJ,KAA/B;AAAb,KACES,oBAACC,kBAAD,eAAWR,IAAX;AAAiBF,SAAK,EAAE,CAACW,MAAM,CAACE,KAAR,EAAeT,UAAf;AAAxB,KADF,CADF;AAtBF;;;AA6BAP,SAAS,CAACiB,WAAVjB,GAAwB,YAAxBA;;AACA,IAAMc,MAAM,GAAGI,wBAAWC,MAAXD,CAAkB;AAC/BH,WAAS,EAAE;AACTK,UAAM,EAAE,GADC;AAETC,mBAAe,EAAEC,eAFR;AAGTC,YAAQ,EAAE;AAHD,GADoB;AAM/BP,OAAK,EAAE;AACLQ,QAAI,EAAE,CADD;AAELJ,UAAM,EAAEK,SAFH;AAGLC,SAAK,EAAED,SAHF;AAILE,WAAO,EAAE,EAJJ;AAKLC,kBAAc,EAAE;AALX;AANwB,CAAlBV,CAAf;;eAee,wBAAUlB,SAAV","names":["CardCover","index","total","style","theme","rest","roundness","coverStyle","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","React","_reactNative","styles","container","image","displayName","StyleSheet","create","height","backgroundColor","grey200","overflow","flex","undefined","width","padding","justifyContent"],"sources":["CardCover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle, Image, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/colors';\n\ntype Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-cover.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({ index, total, style, theme, ...rest }: Props) => {\n  const { roundness } = theme;\n\n  let coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness,\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness,\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image {...rest} style={[styles.image, coverStyle]} />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default withTheme(CardCover);\n\n// @component-docs ignore-next-line\nexport { CardCover };\n"]},"metadata":{},"sourceType":"script"}