{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar ICON_SIZE = 24;\n\nvar ListIcon = function ListIcon(_ref) {\n  var icon = _ref.icon,\n      iconColor = _ref.color,\n      style = _ref.style;\n  return React.createElement(_reactNative.View, {\n    style: [styles.item, style],\n    pointerEvents: \"box-none\"\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: ICON_SIZE,\n    color: iconColor\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nListIcon.displayName = 'List.Icon';\nvar _default = ListIcon;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,SAAS,GAAG,EAAlB;;AA2BA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAAgBC,SAAhB,QAASC,KAAT;AAAA,MAA2BC,KAA3B,QAA2BA,KAA3B;AAAA,SACfC,oBAACC,iBAAD;AAAMF,SAAK,EAAE,CAACG,MAAM,CAACC,IAAR,EAAcJ,KAAd,CAAb;AAAmCK,iBAAa,EAAC;AAAjD,KACEJ,oBAACK,aAAD;AAAMC,UAAM,EAAEV,IAAd;AAAoBW,QAAI,EAAEb,SAA1B;AAAqCI,SAAK,EAAED;AAA5C,IADF,CADe;AAAjB;;AAMA,IAAMK,MAAM,GAAGM,wBAAWC,MAAXD,CAAkB;AAC/BL,MAAI,EAAE;AACJO,UAAM,EAAE,CADJ;AAEJC,UAAM,EAAE,EAFJ;AAGJC,SAAK,EAAE,EAHH;AAIJC,cAAU,EAAE,QAJR;AAKJC,kBAAc,EAAE;AALZ;AADyB,CAAlBN,CAAf;;AAUAb,QAAQ,CAACoB,WAATpB,GAAuB,WAAvBA;eAEeA","names":["ICON_SIZE","ListIcon","icon","iconColor","color","style","React","_reactNative","styles","item","pointerEvents","_Icon","source","size","StyleSheet","create","margin","height","width","alignItems","justifyContent","displayName"],"sources":["ListIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n"]},"metadata":{},"sourceType":"script"}