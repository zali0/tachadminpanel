{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Icon from \"./Icon\";\nimport CrossFadeIcon from \"./CrossFadeIcon\";\nimport { withTheme } from \"../core/theming\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var buttonSize = size * 1.5;\n  return React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(View, null, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP;AACA,OAAOC,IAAP;AACA,OAAOC,aAAP;AACA,SAASC,SAAT;;AA2EA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAWN;AAAA,MAVXC,IAUW,QAVXA,IAUW;AAAA,MATJC,WASI,QATXP,KASW;AAAA,uBARXQ,IAQW;AAAA,MARXA,IAQW,0BARJ,EAQI;AAAA,MAPXC,kBAOW,QAPXA,kBAOW;AAAA,MANXC,QAMW,QANXA,QAMW;AAAA,MALXC,OAKW,QALXA,OAKW;AAAA,2BAJXC,QAIW;AAAA,MAJXA,QAIW,8BAJA,KAIA;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,MAFXC,KAEW,QAFXA,KAEW;AAAA,MADRC,IACQ;;AACX,MAAMC,SAAS,GACb,OAAOT,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDM,KAAK,CAACI,MAANJ,CAAaK,IADlE;AAEA,MAAMC,WAAW,GAAGnB,KAAK,CAACgB,SAAD,CAALhB,CAAiBoB,KAAjBpB,CAAuB,IAAvBA,EAA6BqB,GAA7BrB,GAAmCsB,MAAnCtB,EAApB;AACA,MAAMuB,aAAa,GAAGX,QAAQ,GAAGT,aAAH,GAAmBD,IAAjD;AACA,MAAMsB,UAAU,GAAGhB,IAAI,GAAG,GAA1B;AACA,SACET,oBAACE,eAAD;AACEwB,cAAU,MADZ;AAEEC,YAAQ,MAFV;AAGEf,WAAO,EAAEA,OAHX;AAIEQ,eAAW,EAAEA,WAJf;AAKEL,SAAK,EAAE,CACLa,MAAM,CAACC,SADF,EAEL;AAAEC,WAAK,EAAEL,UAAT;AAAqBM,YAAM,EAAEN,UAA7B;AAAyCO,kBAAY,EAAEP,UAAU,GAAG;AAApE,KAFK,EAGLd,QAAQ,IAAIiB,MAAM,CAACjB,QAHd,EAILI,KAJK,CALT;AAWEL,sBAAkB,EAAEA,kBAXtB;AAaEuB,uBAAmB,EAAEtB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAb3D;AAcEuB,8BAA0B,EAAC,QAd7B;AAeEC,qBAAiB,EAAC,QAfpB;AAgBEC,sBAAkB,EAAE;AAAEzB;AAAF,KAhBtB;AAiBEA,YAAQ,EAAEA,QAjBZ;AAkBE0B,WAAO,EACLnC,eAAe,CAACoC,SAAhBpC,GACI;AAAEqC,SAAG,EAAE,EAAP;AAAWC,UAAI,EAAE,EAAjB;AAAqBC,YAAM,EAAE,EAA7B;AAAiCC,WAAK,EAAE;AAAxC,KADJxC,GAEI;AAAEqC,SAAG,EAAE,CAAP;AAAUC,UAAI,EAAE,CAAhB;AAAmBC,YAAM,EAAE,CAA3B;AAA8BC,WAAK,EAAE;AAArC;AArBR,KAuBM1B,IAvBN,GAyBEhB,oBAAC2C,IAAD,QACE3C,oBAACwB,aAAD;AAAevB,SAAK,EAAEgB,SAAtB;AAAiC2B,UAAM,EAAErC,IAAzC;AAA+CE,QAAI,EAAEA;AAArD,IADF,CAzBF,CADF;AAjBF;;AAkDA,IAAMmB,MAAM,GAAGiB,UAAU,CAACC,MAAXD,CAAkB;AAC/BhB,WAAS,EAAE;AACTkB,cAAU,EAAE,QADH;AAETC,kBAAc,EAAE,QAFP;AAGTC,YAAQ,EAAE,QAHD;AAITC,UAAM,EAAE;AAJC,GADoB;AAO/BvC,UAAQ,EAAE;AACRwC,WAAO,EAAE;AADD;AAPqB,CAAlBN,CAAf;AAYA,eAAexC,SAAS,CAACC,UAAD,CAAxB","names":["React","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","borderless","centered","styles","container","width","height","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","View","source","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"sources":["IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}